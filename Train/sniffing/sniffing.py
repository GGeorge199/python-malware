# This script should be run as admin
import socket
import platform
import netifaces
from Train.supply.Validation import Validator

buff_size = 65565
port = 0


def _set_socket_settings(ip, socket_family):
    sniffer_socket = socket.socket(socket_family, socket.SOCK_RAW, socket.IPPROTO_IP)
    # Binds the socket to address.
    sniffer_socket.bind((ip, port))
    # iInclude IP headers
    sniffer_socket.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
    # receive all packages
    sniffer_socket.ioctl(socket.SIO_RCVALL, socket.RCVALL_ON)
    # set unblocking mode
    sniffer_socket.setblocking(False)
    return sniffer_socket


def _choose_os_family():
    os_platform: dict = {}
    try:
        os_platform["Windows"] = socket.AF_INET
    except:
        print("Windows OS not supported")
    try:
        os_platform["Linux"] = socket.AF_UNIX
    except:
        print("Linux OS not supported")

    return os_platform


def _get_ips() -> list:
    ip_addresses: list = []
    for interface in netifaces.interfaces():
        for if_address in netifaces.ifaddresses(interface).get(socket.AF_INET):
            try:
                ip_addresses.append(if_address["addr"])
            except:
                continue
    return ip_addresses


def _create_socket(ip) -> socket.socket:
    os_platform = _choose_os_family()
    socket_family = os_platform.get(platform.system())
    if socket_family:
        return _set_socket_settings(ip, socket_family)
    else:
        raise Exception("Impossible to create socket")


def _sniff_packets(sockets: list, hostname: str):
    for sniffing_socket in sockets:
        try:
            data = sniffing_socket.recvfrom(buff_size)[0]
            if hostname in str(data):
                return data
        except:
            continue


def sniffer_start(hostname, action_on_data: callable = None, action_if_data: callable = None):
    if Validator.check_if_arguments_defined(action_on_data, action_if_data):
        raise Exception("Only one callable supported by once")
    if Validator.check_if_arguments_empty(action_on_data, action_if_data):
        raise Exception("Sniffer requires action")
    ips: list = _get_ips()
    sockets: list = []
    for ip in ips:
        sockets.append(_create_socket(ip))

    result_of_sniff = None
    # An infinite loop, so our bot can monitor the traffic indefinitely!
    while True:
        result_of_sniff = _sniff_packets(sockets, hostname)
        if result_of_sniff is not None:
            break
    if action_on_data is not None:
        return action_on_data(result_of_sniff)
    else:
        return action_if_data()


# sniffer_start("amazon", action_on_data=print)
